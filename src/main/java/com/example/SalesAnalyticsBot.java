package com.example;

import com.google.api.services.sheets.v4.model.ValueRange;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.HashMap;
import java.util.Map;

public class SalesAnalyticsBot extends TelegramLongPollingBot {
    private final String botToken;
    private final String botUsername;
    private final String spreadsheetId = "1cLE2s2smwRBDa8ozngi6dcnZpGP-XiylubS5r4ygbAc";

    private final GoogleSheetsService sheetsService;

    // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, UserState> userStates = new HashMap<>();

    // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, UserData> userData = new HashMap<>();

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private enum UserState {
        DEFAULT,
        AWAITING_NAME,
        AWAITING_CONTACT,
        AWAITING_COMMENT
    }

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã
    private static class UserData {
        String name;
        String contact;
        String comment;
    }

    public SalesAnalyticsBot(String botToken, String botUsername) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.sheetsService = new GoogleSheetsService();
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String text = message.getText();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text.equals("/start")) {
                sendBlock1(chatId);
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
                UserState state = getUserState(chatId);
                switch (state) {
                    case AWAITING_NAME:
                        UserData data = getUserData(chatId);
                        data.name = text;
                        setUserState(chatId, UserState.AWAITING_CONTACT);
                        askForContact(chatId);
                        break;
                    case AWAITING_CONTACT:
                        data = getUserData(chatId);
                        data.contact = text;
                        setUserState(chatId, UserState.AWAITING_COMMENT);
                        askForComment(chatId);
                        break;
                    case AWAITING_COMMENT:
                        data = getUserData(chatId);
                        data.comment = text;
                        saveToGoogleSheets(chatId, data);
                        sendConfirmation(chatId);
                        clearUserData(chatId);
                        break;
                    default:
                        sendDefaultResponse(chatId);
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
        else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long chatId = update.getCallbackQuery().getMessage().getChatId();

            if (callbackData.equals("show_example")) {
                sendBlock2(chatId);
            } else if (callbackData.equals("analyze_case")) {
                startCaseAnalysis(chatId);
            }
        }
    }

    private void sendBlock1(Long chatId) {
        try {
            // –¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
            String text =
                    "+27% –∫ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ 30 –¥–Ω–µ–π\n" +
                            "–ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤\n\n" +
                            "\"–†–∏—Ç–µ–π–ª, –ú–æ—Å–∫–≤–∞. –û—Ç–¥–µ–ª –∏–∑ 6 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\"";

            // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton button1 = new InlineKeyboardButton();
            button1.setText("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –ø—Ä–∏–º–µ—Ä");
            button1.setCallbackData("show_example");
            row1.add(button1);

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton button2 = new InlineKeyboardButton();
            button2.setText("–†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π –∫–µ–π—Å");
            button2.setCallbackData("analyze_case");
            row2.add(button2);

            rowsInline.add(row1);
            rowsInline.add(row2);

            markupInline.setKeyboard(rowsInline);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            InputStream imageStream = getClass().getResourceAsStream("/img/block1.jpg");
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId.toString());
            photo.setPhoto(new InputFile(imageStream, "block1.jpg"));
            photo.setCaption(text);
            photo.setReplyMarkup(markupInline);

            execute(photo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendBlock2(Long chatId) {
        try {
            // –¢–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞
            String text = "üöò –ó–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤—ã—Ä—É—á–∫–∞ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 31%.\n" +
                    "–ú—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤, –Ω–∞—à–ª–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞:\n" +
                    "–≥–¥–µ —Ç–µ—Ä—è–ª–∏—Å—å –∫–ª–∏–µ–Ω—Ç—ã, –≥–¥–µ —Å–∫—Ä–∏–ø—Ç—ã –±—É–∫—Å–æ–≤–∞–ª–∏.\n\n" +
                    "–ö–ª–∏–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª –ø–æ–¥—Ö–æ–¥ ‚Äî –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏–ª —Å–µ–±—è –∂–¥–∞—Ç—å.\n\n" +
                    "–•–æ—á–µ—à—å ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∂–µ–º, –≥–¥–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏?";

            // Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton button1 = new InlineKeyboardButton();
            button1.setText("–†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π –∫–µ–π—Å");
            button1.setCallbackData("analyze_case");
            row1.add(button1);

            rowsInline.add(row1);
            markupInline.setKeyboard(rowsInline);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            InputStream imageStream = getClass().getResourceAsStream("/img/photo_2025-04-18_14-18-36.jpg");
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId.toString());
            photo.setPhoto(new InputFile(imageStream, "photo_2025-04-18_14-18-36.jpg"));
            photo.setCaption(text);
            photo.setReplyMarkup(markupInline);

            execute(photo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void startCaseAnalysis(Long chatId) {
        try {
            // –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º—ã
            String text = "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø–∞—Ä—É —Å–ª–æ–≤ ‚Äî —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å, —Å –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å, ‚Äî –∏ –º—ã –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏.\n\n" +
                    "üì© –§–æ—Ä–º–∞:\n\n" +
                    "–ò–º—è\n" +
                    "–¢–µ–ª–µ—Ñ–æ–Ω / Telegram\n" +
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –∏ —á—Ç–æ –±–æ–ª–∏—Ç\"";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            InputStream imageStream = getClass().getResourceAsStream("/img/44351e59-c950-4c95-a3ad-2a3a327afea1.png");
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId.toString());
            photo.setPhoto(new InputFile(imageStream, "44351e59-c950-4c95-a3ad-2a3a327afea1.png"));
            photo.setCaption(text);

            execute(photo);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            setUserState(chatId, UserState.AWAITING_NAME);
            setUserData(chatId, new UserData());

            // –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
            askForName(chatId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void askForName(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void askForContact(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram:");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void askForComment(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û–ø–∏—à–∏—Ç–µ, —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –∏ —Å –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å:");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void saveToGoogleSheets(Long chatId, UserData data) {
        try {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets - –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
            List<List<Object>> values = Arrays.asList(
                    Arrays.asList(
                            data.name,
                            data.contact,
                            data.comment,
                            "Chat ID: " + chatId,
                            new java.util.Date().toString()
                    )
            );

            ValueRange body = new ValueRange()
                    .setValues(values);
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
            sheetsService.getSheetsService().spreadsheets().values()
                    .append(spreadsheetId, "A1", body)
                    .setValueInputOption("RAW")
                    .execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendConfirmation(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private UserState getUserState(Long chatId) {
        return userStates.getOrDefault(chatId, UserState.DEFAULT);
    }

    private void setUserState(Long chatId, UserState state) {
        userStates.put(chatId, state);
    }

    private UserData getUserData(Long chatId) {
        return userData.getOrDefault(chatId, new UserData());
    }

    private void setUserData(Long chatId, UserData data) {
        userData.put(chatId, data);
    }

    private void clearUserData(Long chatId) {
        userData.remove(chatId);
        userStates.put(chatId, UserState.DEFAULT);
    }

    private void sendDefaultResponse(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}